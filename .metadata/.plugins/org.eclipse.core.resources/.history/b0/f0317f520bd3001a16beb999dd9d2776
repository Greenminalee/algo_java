package algo;

import java.util.LinkedList;
import java.util.Scanner;

/*
 * https://www.acmicpc.net/problem/2164
 */
public class Algo11 {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int N = scan.nextInt();
		solution(N);
	}
	
	static int solution(int N) 
	{
		LinkedList<Integer> list = new LinkedList<Integer>();
		
		for(int i = 1; i <= N; i++)
			deque(list, "push_front", i);
		
		while(list.size() != 0)
		{

		}
		return (0);
	}
	
	static void deque(LinkedList<Integer> list, String str, int x)
	{
		int  answer = 0;
		if(str.equals("push_front"))
		{
			list.add(0,x);
			return ;
		}
		
		if(str.equals("push_back"))
		{
			list.add(list.size(), x);
			return ;
		}
		
		if(str.equals("pop_front"))
		{
			if (list.size() != 0)
			{
				answer = (list.get(0));
				list.remove(0);
			}
			else
				answer = -1;
		}
		
		if(str.equals("pop_back"))
		{
			if (list.size() != 0)
			{
				answer = (list.get(list.size() - 1));
				list.remove(list.size() -1);
			}
			else
				answer = -1;		
		}
		
		if(str.equals("size"))
		{
			answer = list.size();
		}
		
		if(str.equals("empty"))
		{
			if(list.size() == 0)
				answer = 1;
			else
				answer = 0; 
		}
		
		if(str.equals("front"))
		{
			if (list.size() != 0)
			{
				answer = (list.get(0));
			}
			else
				answer = -1;	
		}
		
		if(str.equals("back"))
		{
			if (list.size() != 0)
			{
				answer = (list.get(list.size() - 1));
			}
			else
				answer = -1;
		}
	}

}
